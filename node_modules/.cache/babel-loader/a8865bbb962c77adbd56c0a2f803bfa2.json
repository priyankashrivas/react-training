{"ast":null,"code":"import _classCallCheck from \"/home/priyanka/redux/streams/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/priyanka/redux/streams/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/priyanka/redux/streams/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/priyanka/redux/streams/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/priyanka/redux/streams/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/priyanka/redux/streams/client/src/components/streams/StreamCreate.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createStream } from '../../actions';\nimport StreamForm from './StreamForm';\n\nvar StreamCreate =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamCreate, _React$Component);\n\n  function StreamCreate() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StreamCreate);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StreamCreate)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderInput = function (_ref) {\n      var input = _ref.input,\n          label = _ref.label,\n          meta = _ref.meta;\n      var className = \"Field \".concat(meta.error && meta.touched ? 'error' : ' ');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autocomplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      })), _this.renderError(meta));\n    };\n\n    _this.onSubmit = function (formValues) {\n      _this.props.createStream(formValues);\n    };\n\n    return _this;\n  }\n\n  _createClass(StreamCreate, [{\n    key: \"renderError\",\n    value: function renderError(_ref2) {\n      var error = _ref2.error,\n          touched = _ref2.touched;\n\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 13\n          },\n          __self: this\n        }, error));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.props);\n      return React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"submit\"));\n    }\n  }]);\n\n  return StreamCreate;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  var error = {};\n\n  if (!formValues.title) {\n    error.title = \"you must enter the title\";\n  }\n\n  if (!formValues.title) {\n    error.description = \"you must enter the description\";\n  }\n\n  return error;\n};\n\nvar formWrapped = reduxForm({\n  form: 'streamCreate',\n  validate: validate\n})(StreamCreate);\nexport default connect(null, {\n  createStream: createStream\n})(formWrapped);","map":{"version":3,"sources":["/home/priyanka/redux/streams/client/src/components/streams/StreamCreate.js"],"names":["React","connect","createStream","StreamForm","StreamCreate","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","props","console","log","handleSubmit","Component","validate","title","description","formWrapped","reduxForm","form"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,UAAP,MAAuB,cAAvB;;IAGMC,Y;;;;;;;;;;;;;;;;;;UAYFC,W,GAAc,gBAAwB;AAAA,UAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,UAAhBC,KAAgB,QAAhBA,KAAgB;AAAA,UAAVC,IAAU,QAAVA,IAAU;AAClC,UAAMC,SAAS,mBAAUD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA6B,OAA7B,GAAuC,GAAjD,CAAf;AACA,aACI;AAAK,QAAA,SAAS,EAAGF,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQF,KAAR,CADJ,EAEI,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFJ,EAGK,MAAKM,WAAL,CAAiBJ,IAAjB,CAHL,CADJ;AAOH,K;;UAEDK,Q,GAAW,UAAAC,UAAU,EAAG;AACpB,YAAKC,KAAL,CAAWb,YAAX,CAAwBY,UAAxB;AACH,K;;;;;;;uCAvB2B;AAAA,UAAfJ,KAAe,SAAfA,KAAe;AAAA,UAATC,OAAS,SAATA,OAAS;;AACxB,UAAGA,OAAO,IAAID,KAAd,EAAoB;AAChB,eACI;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAK,UAAA,SAAS,EAAE,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA2BA,KAA3B,CADJ,CADJ;AAKH;AACJ;;;6BAiBQ;AACLM,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKF,KAAjB;AACA,aACI;AAAM,QAAA,QAAQ,EAAI,KAAKA,KAAL,CAAWG,YAAX,CAAwB,KAAKL,QAA7B,CAAlB;AAA0D,QAAA,SAAS,EAAC,eAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAE,OAAb;AAAqB,QAAA,SAAS,EAAG,KAAKR,WAAtC;AAAmD,QAAA,KAAK,EAAC,aAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAE,aAAb;AAA2B,QAAA,SAAS,EAAE,KAAKA,WAA3C;AAAyD,QAAA,KAAK,EAAC,mBAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI;AAAQ,QAAA,SAAS,EAAG,mBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,CADJ;AAOH;;;;EApCsBL,KAAK,CAACmB,S;;AAuCjC,IAAMC,QAAQ,GAAE,SAAVA,QAAU,CAACN,UAAD,EAAgB;AAC5B,MAAMJ,KAAK,GAAE,EAAb;;AACA,MAAG,CAACI,UAAU,CAACO,KAAf,EAAqB;AACjBX,IAAAA,KAAK,CAACW,KAAN,GAAa,0BAAb;AACH;;AACD,MAAG,CAACP,UAAU,CAACO,KAAf,EAAqB;AACjBX,IAAAA,KAAK,CAACY,WAAN,GAAkB,gCAAlB;AACH;;AACD,SAAOZ,KAAP;AACH,CATD;;AAWA,IAAMa,WAAW,GAAGC,SAAS,CAAC;AAC1BC,EAAAA,IAAI,EAAE,cADoB;AAE1BL,EAAAA,QAAQ,EAACA;AAFiB,CAAD,CAAT,CAGjBhB,YAHiB,CAApB;AAKA,eAAeH,OAAO,CAAC,IAAD,EAAM;AAACC,EAAAA,YAAY,EAAZA;AAAD,CAAN,CAAP,CAA6BqB,WAA7B,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { createStream } from '../../actions'\nimport StreamForm from './StreamForm'\n\n\nclass StreamCreate extends React.Component {\n    \n    renderError({error,touched}){\n        if(touched && error){\n            return (\n                <div className=\"ui error message\">\n                    <div className =\"header\" >{error}</div>\n                </div>\n            );\n        }\n    }\n    \n    renderInput = ({input,label,meta}) => {\n        const className=`Field ${meta.error && meta.touched ? 'error' : ' '}`;\n        return (\n            <div className ={className}>\n                <label>{label}</label>\n                <input {...input} autocomplete=\"off\"/>\n                {this.renderError(meta)}\n            </div>\n        );  \n    }\n    \n    onSubmit = formValues =>{\n        this.props.createStream(formValues);\n    };\n    \n    render() {\n        console.log(this.props);\n        return (\n            <form onSubmit = {this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\n                <Field name =\"title\" component ={this.renderInput} label=\"Enter title\" />\n                <Field name =\"description\" component={this.renderInput}  label=\"Enter description\"/>\n                <button className = \"ui button primary\">submit</button>\n            </form>\n        );\n    }  \n}\n\nconst validate =(formValues) => {\n    const error ={};\n    if(!formValues.title){\n        error.title= \"you must enter the title\";\n    }\n    if(!formValues.title){\n        error.description=\"you must enter the description\";\n    }\n    return error;\n}\n\nconst formWrapped = reduxForm({\n    form: 'streamCreate',\n    validate:validate\n})(StreamCreate);\n\nexport default connect(null,{createStream})(formWrapped);"]},"metadata":{},"sourceType":"module"}