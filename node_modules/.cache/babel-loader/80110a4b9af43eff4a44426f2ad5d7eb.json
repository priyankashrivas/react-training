{"ast":null,"code":"import _classCallCheck from \"/home/priyanka/redux/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/priyanka/redux/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/priyanka/redux/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/priyanka/redux/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/priyanka/redux/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/priyanka/redux/client/src/components/streams/StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nvar StreamCreate =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamCreate, _React$Component);\n\n  function StreamCreate() {\n    _classCallCheck(this, StreamCreate);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StreamCreate).apply(this, arguments));\n  }\n\n  _createClass(StreamCreate, [{\n    key: \"renderInput\",\n    value: function renderInput(_ref) {\n      var input = _ref.input,\n          label = _ref.label,\n          meta = _ref.meta;\n      return React.createElement(\"div\", {\n        className: \"Field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autocomplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      })), this.renderError(meta));\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(formvalues) {\n      // event.preventDefault();\n      console.log(formvalues);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //console.log(this.props);\n      return React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, \"submit\"));\n    }\n  }]);\n\n  return StreamCreate;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  var error = {};\n\n  if (!formValues.title) {\n    error.title = \"you must enter the title\";\n  }\n\n  if (!formValues.title) {\n    error.description = \"you must enter the description\";\n  }\n\n  return error;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate: validate\n})(StreamCreate);","map":{"version":3,"sources":["/home/priyanka/redux/client/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","StreamCreate","input","label","meta","renderError","formvalues","console","log","props","handleSubmit","onSubmit","renderInput","Component","validate","formValues","error","title","description","form"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAeC,SAAf,QAA+B,YAA/B;;IAGMC,Y;;;;;;;;;;;;;sCAG8B;AAAA,UAAnBC,KAAmB,QAAnBA,KAAmB;AAAA,UAAbC,KAAa,QAAbA,KAAa;AAAA,UAAPC,IAAO,QAAPA,IAAO;AAC5B,aACI;AAAK,QAAA,SAAS,EAAE,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQD,KAAR,CADJ,EAEI,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFJ,EAGK,KAAKG,WAAL,CAAiBD,IAAjB,CAHL,CADJ;AAOH;;;6BACQE,U,EAAW;AACjB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACF;;;6BAEQ;AACL;AACA,aACI;AAAM,QAAA,QAAQ,EAAI,KAAKG,KAAL,CAAWC,YAAX,CAAwB,KAAKC,QAA7B,CAAlB;AAA0D,QAAA,SAAS,EAAC,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAE,OAAb;AAAqB,QAAA,SAAS,EAAG,KAAKC,WAAtC;AAAmD,QAAA,KAAK,EAAC,aAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAE,aAAb;AAA2B,QAAA,SAAS,EAAE,KAAKA,WAA3C;AAAyD,QAAA,KAAK,EAAC,mBAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI;AAAQ,QAAA,SAAS,EAAG,mBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,CADJ;AAOH;;;;EA1BsBd,KAAK,CAACe,S;;AA6BjC,IAAMC,QAAQ,GAAE,SAAVA,QAAU,CAACC,UAAD,EAAgB;AAC5B,MAAMC,KAAK,GAAE,EAAb;;AACA,MAAG,CAACD,UAAU,CAACE,KAAf,EAAqB;AACjBD,IAAAA,KAAK,CAACC,KAAN,GAAa,0BAAb;AACH;;AACD,MAAG,CAACF,UAAU,CAACE,KAAf,EAAqB;AACjBD,IAAAA,KAAK,CAACE,WAAN,GAAkB,gCAAlB;AACH;;AACD,SAAOF,KAAP;AACH,CATD;;AAWA,eAAehB,SAAS,CAAC;AACrBmB,EAAAA,IAAI,EAAE,cADe;AAErBL,EAAAA,QAAQ,EAACA;AAFY,CAAD,CAAT,CAGZb,YAHY,CAAf","sourcesContent":["import React from 'react';\nimport {Field, reduxForm} from 'redux-form';\n\n\nclass StreamCreate extends React.Component {\n    enderError\n    \n    renderInput({input,label,meta}) {\n        return (\n            <div className =\"Field\">\n                <label>{label}</label>\n                <input {...input} autocomplete=\"off\"/>\n                {this.renderError(meta)}\n            </div>\n        );  \n    }\n    onSubmit(formvalues){\n       // event.preventDefault();\n       console.log(formvalues);\n    }\n    \n    render() {\n        //console.log(this.props);\n        return (\n            <form onSubmit = {this.props.handleSubmit(this.onSubmit)} className=\"ui form\">\n                <Field name =\"title\" component ={this.renderInput} label=\"Enter title\" />\n                <Field name =\"description\" component={this.renderInput}  label=\"Enter description\"/>\n                <button className = \"ui button primary\">submit</button>\n            </form>\n        );\n    }  \n}\n\nconst validate =(formValues) => {\n    const error ={};\n    if(!formValues.title){\n        error.title= \"you must enter the title\";\n    }\n    if(!formValues.title){\n        error.description=\"you must enter the description\";\n    }\n    return error;\n}\n\nexport default reduxForm({\n    form: 'streamCreate',\n    validate:validate\n})(StreamCreate);"]},"metadata":{},"sourceType":"module"}