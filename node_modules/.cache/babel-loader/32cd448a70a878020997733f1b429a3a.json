{"ast":null,"code":"import _regeneratorRuntime from \"/home/priyanka/redux/blog/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/priyanka/redux/blog/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n//\nimport _ from 'lodash';\nimport jsonPlaceHolder from '../apis/jsonPlaceHolder'; ///fetch post and user both (action creator in action creator)\n\nexport var fetchPostAndUser = function fetchPostAndUser() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return dispatch(fetchPosts());\n\n              case 2:\n                _.map(getState().posts);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}; //fetching a post in asynchronous manner with help of middleware\n\nexport var fetchPosts = function fetchPosts() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return jsonPlaceHolder.get('/posts');\n\n              case 2:\n                response = _context2.sent;\n                dispatch({\n                  type: 'FETCH_POSTS',\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}; //fetching singuler records\n\nexport var fetchUser = function fetchUser(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return jsonPlaceHolder.get(\"/users/\".concat(id));\n\n              case 2:\n                response = _context3.sent;\n                dispatch({\n                  type: 'FETCH_USER',\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n}; //one time meoization (private function)","map":{"version":3,"sources":["/home/priyanka/redux/blog/src/actions/index.js"],"names":["_","jsonPlaceHolder","fetchPostAndUser","dispatch","getState","fetchPosts","map","posts","get","response","type","payload","data","fetchUser","id"],"mappings":";;AAAA;AACA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,eAAP,MAA4B,yBAA5B,C,CAEA;;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,iBAAOC,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAE5BD,QAAQ,CAACE,UAAU,EAAX,CAFoB;;AAAA;AAGlCL,gBAAAA,CAAC,CAACM,GAAF,CAAMF,QAAQ,GAAGG,KAAjB;;AAHkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB,C,CAQP;;AAEA,OAAO,IAAMF,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,kBAAMF,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAELF,eAAe,CAACO,GAAhB,CAAoB,QAApB,CAFK;;AAAA;AAEtBC,gBAAAA,QAFsB;AAI5BN,gBAAAA,QAAQ,CAAC;AAAEO,kBAAAA,IAAI,EAAE,aAAR;AAAuBC,kBAAAA,OAAO,EAAEF,QAAQ,CAACG;AAAzC,iBAAD,CAAR;;AAJ4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB,C,CAOP;;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,EAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAQ,kBAAMX,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAENF,eAAe,CAACO,GAAhB,kBAA8BM,EAA9B,EAFM;;AAAA;AAEvBL,gBAAAA,QAFuB;AAG7BN,gBAAAA,QAAQ,CAAC;AAAEO,kBAAAA,IAAI,EAAE,YAAR;AAAsBC,kBAAAA,OAAO,EAAEF,QAAQ,CAACG;AAAxC,iBAAD,CAAR;;AAH6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB,C,CAQP","sourcesContent":["//\nimport _ from 'lodash';\nimport jsonPlaceHolder from '../apis/jsonPlaceHolder';\n\n///fetch post and user both (action creator in action creator)\n\nexport const fetchPostAndUser = () => async (dispatch ,getState)=> {\n\n    await dispatch(fetchPosts());\n    _.map(getState().posts);\n\n};\n\n\n//fetching a post in asynchronous manner with help of middleware\n\nexport const fetchPosts = () => async dispatch => {\n\n    const response = await jsonPlaceHolder.get('/posts');\n\n    dispatch({ type: 'FETCH_POSTS', payload: response.data });\n};\n\n//fetching singuler records\n\nexport const fetchUser = (id) => async dispatch => {\n    \n    const response = await jsonPlaceHolder.get(`/users/${id}`);\n    dispatch({ type: 'FETCH_USER', payload: response.data });\n\n};\n\n\n//one time meoization (private function)\n\n\n\n    \n"]},"metadata":{},"sourceType":"module"}