{"ast":null,"code":"import _regeneratorRuntime from \"/home/priyanka/redux/streams/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/priyanka/redux/streams/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport streams from '../apis/streams';\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAMS, FETCH_STREAM, EDIT_STREAM, DELETE_STREAM } from './types'; //action creator \n\nexport var signIn = function signIn(userId) {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport var signOut = function signOut() {\n  return {\n    type: SIGN_OUT\n  };\n}; //creating streams through action creator\n\nexport var createStream = function createStream(formValues) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return streams.post('/streams', formValues);\n\n              case 2:\n                response = _context.sent;\n                dispatch({\n                  type: CREATE_STREAM,\n                  payload: response.dat\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var fetchStreams =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(dispatch) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return streams.post('/streams', formValues);\n\n          case 2:\n            response = _context2.sent;\n            dispatch({\n              type: FETCH_STREAMS,\n              payload: response.dat\n            });\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function fetchStreams(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var fetchStream = function fetchStream(formValues) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return streams.post('/streams', formValues);\n\n              case 2:\n                response = _context3.sent;\n                dispatch({\n                  type: FETCH_STREAM,\n                  payload: response.dat\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/home/priyanka/redux/streams/client/src/actions/index.js"],"names":["streams","SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAMS","FETCH_STREAM","EDIT_STREAM","DELETE_STREAM","signIn","userId","type","payload","signOut","createStream","formValues","dispatch","post","response","dat","fetchStreams","fetchStream"],"mappings":";;AAAA,OAAOA,OAAP,MAAoB,iBAApB;AACA,SAAQC,OAAR,EACQC,QADR,EAEQC,aAFR,EAGQC,aAHR,EAIQC,YAJR,EAKQC,WALR,EAMQC,aANR,QAOW,SAPX,C,CASA;;AACA,OAAO,IAAOC,MAAM,GAAG,SAATA,MAAS,CAACC,MAAD,EAAY;AAC/B,SAAO;AACHC,IAAAA,IAAI,EAAGT,OADJ;AAEHU,IAAAA,OAAO,EAAGF;AAFP,GAAP;AAIH,CALM;AAOP,OAAO,IAAMG,OAAO,GAAG,SAAVA,OAAU,GAAM;AACzB,SAAO;AACHF,IAAAA,IAAI,EAAGR;AADJ,GAAP;AAIH,CALM,C,CAMP;;AACA,OAAO,IAAMW,YAAY,GAAG,SAAfA,YAAe,CAAAC,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAI,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACff,OAAO,CAACgB,IAAR,CAAa,UAAb,EAAyBF,UAAzB,CADe;;AAAA;AAChCG,gBAAAA,QADgC;AAGtCF,gBAAAA,QAAQ,CAAE;AAACL,kBAAAA,IAAI,EAAEP,aAAP;AAAsBQ,kBAAAA,OAAO,EAAEM,QAAQ,CAACC;AAAxC,iBAAF,CAAR;;AAHsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA/B;AAMP,OAAO,IAAMC,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAI,kBAAOJ,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACFf,OAAO,CAACgB,IAAR,CAAa,UAAb,EAAyBF,UAAzB,CADE;;AAAA;AACnBG,YAAAA,QADmB;AAGzBF,YAAAA,QAAQ,CAAE;AAACL,cAAAA,IAAI,EAAEN,aAAP;AAAsBO,cAAAA,OAAO,EAAEM,QAAQ,CAACC;AAAxC,aAAF,CAAR;;AAHyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAJ;;AAAA,kBAAZC,YAAY;AAAA;AAAA;AAAA,GAAlB;AAMP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAN,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAI,kBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACdf,OAAO,CAACgB,IAAR,CAAa,UAAb,EAAyBF,UAAzB,CADc;;AAAA;AAC/BG,gBAAAA,QAD+B;AAGrCF,gBAAAA,QAAQ,CAAE;AAACL,kBAAAA,IAAI,EAAEL,YAAP;AAAqBM,kBAAAA,OAAO,EAAEM,QAAQ,CAACC;AAAvC,iBAAF,CAAR;;AAHqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA9B","sourcesContent":["import streams from '../apis/streams';\nimport {SIGN_IN ,\n        SIGN_OUT,\n        CREATE_STREAM,\n        FETCH_STREAMS,\n        FETCH_STREAM,\n        EDIT_STREAM,\n        DELETE_STREAM\n    } from './types';\n\n//action creator \nexport const  signIn = (userId) => {\n    return {\n        type : SIGN_IN,\n        payload : userId\n    };\n};\n\nexport const signOut = () => {\n    return {\n        type : SIGN_OUT\n    };\n\n};\n//creating streams through action creator\nexport const createStream = formValues => async (dispatch) => {\n    const response = await streams.post('/streams', formValues);\n\n    dispatch ({type: CREATE_STREAM ,payload :response.dat});\n};\n\nexport const fetchStreams =  async (dispatch) => {\n    const response = await streams.post('/streams', formValues);\n\n    dispatch ({type: FETCH_STREAMS ,payload :response.dat});\n};\n\nexport const fetchStream = formValues => async (dispatch) => {\n    const response = await streams.post('/streams', formValues);\n\n    dispatch ({type: FETCH_STREAM ,payload :response.dat});\n};"]},"metadata":{},"sourceType":"module"}