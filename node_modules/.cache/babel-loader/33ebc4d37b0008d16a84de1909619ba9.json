{"ast":null,"code":"import _classCallCheck from \"/home/priyanka/myproject/webapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/priyanka/myproject/webapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/priyanka/myproject/webapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/priyanka/myproject/webapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/priyanka/myproject/webapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/priyanka/myproject/webapp/src/components/admin/UserForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nvar UserForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(UserForm, _React$Component);\n\n  function UserForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, UserForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(UserForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderField = function (_ref) {\n      var input = _ref.input,\n          Type = _ref.Type,\n          label = _ref.label,\n          meta = _ref.meta;\n      var className = \"field \".concat(meta.error && meta.touched ? 'error' : '');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        type: Type,\n        placeholder: label,\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      })), _this.renderError(meta));\n    };\n\n    _this.renderSelect = function (_ref2) {\n      var input = _ref2.input,\n          label = _ref2.label,\n          meta = _ref2.meta;\n      var className = \"Field \".concat(meta.error && meta.touched ? 'error' : ' ');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, label), React.createElement(\"select\", Object.assign({}, input, {\n        placeholder: label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }), React.createElement(\"option\", {\n        value: \"Heart specialist\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"Heart Specialist\"), React.createElement(\"option\", {\n        value: \"Bone Specialist\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"Bone Specialist\"), React.createElement(\"option\", {\n        value: \"Eye Specialist\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"Eye Specialist\"), React.createElement(\"option\", {\n        value: \"Lungs Specialist \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \"Lungs Specialist\"), React.createElement(\"option\", {\n        value: \"Kidney Specialist\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"Kidney Specialist\")), _this.renderError(meta));\n    };\n\n    _this.onSubmit = function (formValues) {\n      _this.props.onSubmit(formValues);\n    };\n\n    return _this;\n  }\n\n  _createClass(UserForm, [{\n    key: \"renderError\",\n    value: function renderError(_ref3) {\n      var error = _ref3.error,\n          touched = _ref3.touched;\n\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 9\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10\n          },\n          __self: this\n        }, error));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(Field, {\n        Type: \"text\",\n        name: \"id\",\n        component: this.renderField,\n        label: \"Doctor id\",\n        placeholder: \"Enter doctor id\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }), React.createElement(Field, {\n        Type: \"text\",\n        name: \"type\",\n        component: this.renderSelect,\n        label: \"Type of Doctor\",\n        placeholder: \"Select the type\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), React.createElement(Field, {\n        Type: \"text\",\n        name: \"doctorName\",\n        component: this.renderField,\n        label: \"Enter Doctor Name\",\n        placeholder: \"Doctor name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }), React.createElement(Field, {\n        Type: \"text\",\n        name: \"qualification\",\n        component: this.renderField,\n        label: \"Enter Doctor Qulification\",\n        placeholder: \"Enter username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), React.createElement(Field, {\n        Type: \"password\",\n        name: \"password\",\n        component: this.renderField,\n        label: \"Enter Password\",\n        placeholder: \"Enter password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), React.createElement(Field, {\n        Type: \"number\",\n        name: \"number\",\n        component: this.renderField,\n        label: \"Mobile no.\",\n        placeholder: \"Enter mobile no.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(Field, {\n        Type: \"email\",\n        name: \"email\",\n        component: this.renderField,\n        label: \"Email Id\",\n        placeholder: \"Enter email id\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"Submit\"), React.createElement(\"button\", {\n        className: \"ui button red\",\n        disabled: this.props.pristine || this.props.submitting,\n        onClick: this.props.reset,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Reset\")));\n    }\n  }]);\n\n  return UserForm;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  var errors = {};\n\n  if (!formValues.id) {\n    errors.id = \"Doctor id required !!!\";\n  } else if (formValues.id.length > 10) {\n    errors.password = 'Max length is 10 character';\n  }\n\n  if (!formValues.type) {\n    errors.last_name = \"Select doctor type!!!\";\n  }\n\n  if (!formValues.doctorName) {\n    errors.doctorName = \"Doctor name required !!!\";\n  } else if (formValues.doctorName.length > 30) {\n    errors.password = 'Max length is 10 character';\n  }\n\n  if (!formValues.email) {\n    errors.email = \"Email required!!!\";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(formValues.email)) {\n    errors.email = 'Enter Valid Email';\n  }\n\n  if (!formValues.username) {\n    errors.username = \"Username required......!!!\";\n  } else if (formValues.username.length > 30) {\n    errors.password = 'Max length is 30 character';\n  } else if (!/[^a-zA-Z0-9 ]/i.test(formValues.username)) {\n    errors.username = 'Only Alphanumeric value will accepted';\n  }\n\n  if (!formValues.password) {\n    errors.password = \"Password required.....!!!\";\n  } else if (formValues.password.length < 6) {\n    errors.password = 'Minimum length is 6';\n  } else if (formValues.password.length > 20) {\n    errors.password = 'Minimum length is 20';\n  } else if (!/[^a-zA-Z0-9 ]/i.test(formValues.password)) {\n    errors.password = 'Only Alfanumeric value will aceepted';\n  }\n\n  if (!formValues.cpassword) {\n    errors.cpassword = \"Confirm your password!!!\";\n  } else if (formValues.password !== formValues.cpassword) {\n    errors.cpassword = \"mismatch password!!!\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'registerForm',\n  validate: validate\n})(UserForm);","map":{"version":3,"sources":["/home/priyanka/myproject/webapp/src/components/admin/UserForm.js"],"names":["React","Field","reduxForm","UserForm","renderField","input","Type","label","meta","className","error","touched","renderError","renderSelect","onSubmit","formValues","props","handleSubmit","pristine","submitting","reset","Component","validate","errors","id","length","password","type","last_name","doctorName","email","test","username","cpassword","form"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Field, reduxForm } from 'redux-form'\n\nclass UserForm extends React.Component {\n  \n  renderError({error,touched}) {\n    if(touched && error){\n      return (\n        <div className=\"ui error message\">\n          <div className=\"header\">{error}</div>\n        </div>\n      );\n    }\n  }\n\n renderField = ({input,Type, label,meta }) => {\n   const className= `field ${meta.error && meta.touched ? 'error' : '' }`;\n    return (\n      <div className={className}>\n        <label>\n          {label}\n        </label>\n        <input {...input} type={Type} placeholder={label} autoComplete=\"off\"/>\n        {this.renderError(meta)}\n      </div>\n    )\n  }\n\n  renderSelect =({input,label,meta}) => {\n    const className=`Field ${meta.error && meta.touched ? 'error' : ' '}`;\n    return (\n        <div className={className}>\n          <label>\n            {label}\n          </label>\n          <select {...input} placeholder ={label}>\n            <option></option>\n            <option value=\"Heart specialist\">Heart Specialist</option>\n            <option value=\"Bone Specialist\">Bone Specialist</option>\n            <option value=\"Eye Specialist\">Eye Specialist</option>\n            <option value=\"Lungs Specialist \">Lungs Specialist</option>\n            <option value=\"Kidney Specialist\">Kidney Specialist</option>\n          </select>\n          {this.renderError(meta)}\n        </div>\n    )\n}\n\n  onSubmit = formValues => {\n   \n    this.props.onSubmit(formValues);\n  }\n\n  render () {\n    return (\n      <div>\n       <form onSubmit={this.props.handleSubmit(this.onSubmit)} className='ui form error'>\n        <Field \n          Type='text'\n          name='id'\n          component={this.renderField}\n          label='Doctor id'\n          placeholder='Enter doctor id'\n        />\n        <Field \n          Type='text'\n          name='type'\n          component={this.renderSelect}\n          label='Type of Doctor'\n          placeholder='Select the type'\n        />\n        <Field \n          Type='text'\n          name='doctorName'\n          component={this.renderField}\n          label='Enter Doctor Name'\n          placeholder='Doctor name'\n        />\n        <Field \n          Type='text'\n          name='qualification'\n          component={this.renderField}\n          label='Enter Doctor Qulification'\n          placeholder='Enter username'\n        />\n        <Field \n          Type='password' \n          name='password' \n          component={this.renderField} \n          label='Enter Password'\n          placeholder='Enter password'\n          \n        />\n        <Field \n          Type='number' \n          name='number' \n          component={this.renderField}  \n          label='Mobile no.'\n          placeholder='Enter mobile no.'\n          \n        />\n\n        <Field \n          Type='email' \n          name='email' \n          component={this.renderField}  \n          label='Email Id'\n          placeholder='Enter email id'\n          \n        />\n        <button className=\"ui button primary\" >Submit</button>\n        <button className='ui button red' disabled={this.props.pristine || this.props.submitting} onClick={this.props.reset}>\n          Reset\n        </button>\n      </form>\n      </div>      \n    )\n  }\n}\n\n\nconst validate = formValues => {\n  const errors = {};\n  \n  if(!formValues.id){\n    errors.id = \"Doctor id required !!!\";\n  }else if(formValues.id.length>10){\n    errors.password = 'Max length is 10 character'\n  }\n\n  if(!formValues.type){\n    errors.last_name = \"Select doctor type!!!\";\n  }\n\n\n  if(!formValues.doctorName){\n    errors.doctorName = \"Doctor name required !!!\";\n  }else if(formValues.doctorName.length>30){\n    errors.password = 'Max length is 10 character'\n  }\n\n\n  if(!formValues.email){\n    errors.email = \"Email required!!!\"; \n  }else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(formValues.email)) {\n    errors.email = 'Enter Valid Email'\n  }\n\n  if(!formValues.username){\n    errors.username = \"Username required......!!!\";\n  }else if(formValues.username.length>30){\n    errors.password = 'Max length is 30 character'\n  }else if (!/[^a-zA-Z0-9 ]/i.test(formValues.username)) {\n    errors.username = 'Only Alphanumeric value will accepted'\n  }\n\n  if(!formValues.password){\n    errors.password = \"Password required.....!!!\";\n  }else if(formValues.password.length<6 ){\n    errors.password = 'Minimum length is 6'  \n  }else if(formValues.password.length>20 ){\n    errors.password = 'Minimum length is 20' \n  }\n  else if (!/[^a-zA-Z0-9 ]/i.test(formValues.password)) {\n    errors.password = 'Only Alfanumeric value will aceepted'\n  }\n\n  if(!formValues.cpassword){\n    errors.cpassword = \"Confirm your password!!!\";\n  }else if(formValues.password !== formValues.cpassword){\n    errors.cpassword = \"mismatch password!!!\";\n  }\n  return errors;\n};\n\nexport default reduxForm({\n    form: 'registerForm',\n    validate\n  })(UserForm);\n\n"]},"metadata":{},"sourceType":"module"}