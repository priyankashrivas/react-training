{"ast":null,"code":"import _regeneratorRuntime from \"/home/priyanka/redux/blog/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/priyanka/redux/blog/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _ from 'lodash';\nimport jsonPlaceHolder from '../apis/jsonPlaceHolder';\nimport { promised } from 'q'; ///fetch post and user both (action creator in action creator)\n\nexport var fetchPostAndUser = function fetchPostAndUser() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var userIds;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return dispatch(fetchPosts());\n\n              case 2:\n                //maintaining unique user ids\n                userIds = _.uniq(_.map(getState().posts, 'userId')); //console.log(userIds);\n\n                userIds.forEach(function (id) {\n                  return dispatch(fetchUser(id));\n                });\n                promised.All(userIds.map(function (id) {\n                  return dispatch(fetchUser(id));\n                }));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}; //fetching a post in asynchronous manner with help of middleware\n\nexport var fetchPosts = function fetchPosts() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return jsonPlaceHolder.get('/posts');\n\n              case 2:\n                response = _context2.sent;\n                dispatch({\n                  type: 'FETCH_POSTS',\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}; //fetching singuler records\n\nexport var fetchUser = function fetchUser(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return jsonPlaceHolder.get(\"/users/\".concat(id));\n\n              case 2:\n                response = _context3.sent;\n                dispatch({\n                  type: 'FETCH_USER',\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/home/priyanka/redux/blog/src/actions/index.js"],"names":["_","jsonPlaceHolder","promised","fetchPostAndUser","dispatch","getState","fetchPosts","userIds","uniq","map","posts","forEach","id","fetchUser","All","get","response","type","payload","data"],"mappings":";;AACA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AACA,SAASC,QAAT,QAAyB,GAAzB,C,CAEA;;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,iBAAOC,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAE5BD,QAAQ,CAACE,UAAU,EAAX,CAFoB;;AAAA;AAIlC;AACMC,gBAAAA,OAL4B,GAKlBP,CAAC,CAACQ,IAAF,CAAOR,CAAC,CAACS,GAAF,CAAMJ,QAAQ,GAAGK,KAAjB,EAAyB,QAAzB,CAAP,CALkB,EAMlC;;AAEAH,gBAAAA,OAAO,CAACI,OAAR,CAAgB,UAAAC,EAAE;AAAA,yBAAIR,QAAQ,CAACS,SAAS,CAACD,EAAD,CAAV,CAAZ;AAAA,iBAAlB;AACAV,gBAAAA,QAAQ,CAACY,GAAT,CAAaP,OAAO,CAACE,GAAR,CAAY,UAAAG,EAAE;AAAA,yBAAIR,QAAQ,CAACS,SAAS,CAACD,EAAD,CAAV,CAAZ;AAAA,iBAAd,CAAb;;AATkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB,C,CAeP;;AAEA,OAAO,IAAMN,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,kBAAMF,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAELH,eAAe,CAACc,GAAhB,CAAoB,QAApB,CAFK;;AAAA;AAEtBC,gBAAAA,QAFsB;AAI5BZ,gBAAAA,QAAQ,CAAC;AAAEa,kBAAAA,IAAI,EAAE,aAAR;AAAuBC,kBAAAA,OAAO,EAAEF,QAAQ,CAACG;AAAzC,iBAAD,CAAR;;AAJ4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB,C,CAOP;;AAEA,OAAO,IAAMN,SAAS,GAAG,SAAZA,SAAY,CAACD,EAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAQ,kBAAMR,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAENH,eAAe,CAACc,GAAhB,kBAA8BH,EAA9B,EAFM;;AAAA;AAEvBI,gBAAAA,QAFuB;AAG7BZ,gBAAAA,QAAQ,CAAC;AAAEa,kBAAAA,IAAI,EAAE,YAAR;AAAsBC,kBAAAA,OAAO,EAAEF,QAAQ,CAACG;AAAxC,iBAAD,CAAR;;AAH6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB","sourcesContent":["\nimport _ from 'lodash';\nimport jsonPlaceHolder from '../apis/jsonPlaceHolder';\nimport { promised } from 'q';\n\n///fetch post and user both (action creator in action creator)\n\nexport const fetchPostAndUser = () => async (dispatch ,getState)=> {\n\n    await dispatch(fetchPosts());\n\n    //maintaining unique user ids\n    const userIds = _.uniq(_.map(getState().posts , 'userId'));\n    //console.log(userIds);\n\n    userIds.forEach(id => dispatch(fetchUser(id)));\n    promised.All(userIds.map(id => dispatch(fetchUser(id))));\n\n\n};\n\n\n//fetching a post in asynchronous manner with help of middleware\n\nexport const fetchPosts = () => async dispatch => {\n\n    const response = await jsonPlaceHolder.get('/posts');\n\n    dispatch({ type: 'FETCH_POSTS', payload: response.data });\n};\n\n//fetching singuler records\n\nexport const fetchUser = (id) => async dispatch => {\n    \n    const response = await jsonPlaceHolder.get(`/users/${id}`);\n    dispatch({ type: 'FETCH_USER', payload: response.data });\n\n};\n\n\n\n\n    \n"]},"metadata":{},"sourceType":"module"}